// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import {
  createProxyPatternResponseTransformer,
  listProxyPatternsResponseTransformer,
  readProxyPatternResponseTransformer,
  updateProxyPatternResponseTransformer,
} from "./transformers.gen";
import type {
  CreateProxyPatternData,
  CreateProxyPatternErrors,
  CreateProxyPatternResponses,
  DeleteProxyPatternData,
  DeleteProxyPatternErrors,
  DeleteProxyPatternResponses,
  ListProxyPatternsData,
  ListProxyPatternsResponses,
  ReadProxyPatternData,
  ReadProxyPatternErrors,
  ReadProxyPatternResponses,
  UpdateProxyPatternData,
  UpdateProxyPatternErrors,
  UpdateProxyPatternResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class Default {
  /**
   * List Proxy Patterns
   */
  public static listProxyPatterns<ThrowOnError extends boolean = false>(
    options?: Options<ListProxyPatternsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      ListProxyPatternsResponses,
      unknown,
      ThrowOnError
    >({
      responseType: "json",
      responseTransformer: listProxyPatternsResponseTransformer,
      url: "/proxy_patterns",
      ...options,
    });
  }

  /**
   * Create Proxy Pattern
   */
  public static createProxyPattern<ThrowOnError extends boolean = false>(
    options: Options<CreateProxyPatternData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateProxyPatternResponses,
      CreateProxyPatternErrors,
      ThrowOnError
    >({
      responseType: "json",
      responseTransformer: createProxyPatternResponseTransformer,
      url: "/proxy_patterns",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Delete Proxy Pattern
   */
  public static deleteProxyPattern<ThrowOnError extends boolean = false>(
    options: Options<DeleteProxyPatternData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteProxyPatternResponses,
      DeleteProxyPatternErrors,
      ThrowOnError
    >({
      url: "/proxy_patterns/{pattern_id}",
      ...options,
    });
  }

  /**
   * Read Proxy Pattern
   */
  public static readProxyPattern<ThrowOnError extends boolean = false>(
    options: Options<ReadProxyPatternData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      ReadProxyPatternResponses,
      ReadProxyPatternErrors,
      ThrowOnError
    >({
      responseType: "json",
      responseTransformer: readProxyPatternResponseTransformer,
      url: "/proxy_patterns/{pattern_id}",
      ...options,
    });
  }

  /**
   * Update Proxy Pattern
   */
  public static updateProxyPattern<ThrowOnError extends boolean = false>(
    options: Options<UpdateProxyPatternData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).patch<
      UpdateProxyPatternResponses,
      UpdateProxyPatternErrors,
      ThrowOnError
    >({
      responseType: "json",
      responseTransformer: updateProxyPatternResponseTransformer,
      url: "/proxy_patterns/{pattern_id}",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}
