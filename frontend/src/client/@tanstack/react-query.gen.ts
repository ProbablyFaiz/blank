// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";
import { Default, type Options } from "../sdk.gen";
import type {
  CreateProxyPatternData,
  CreateProxyPatternError,
  CreateProxyPatternResponse,
  DeleteProxyPatternData,
  DeleteProxyPatternError,
  DeleteProxyPatternResponse,
  ListProxyPatternsData,
  ReadProxyPatternData,
  UpdateProxyPatternData,
  UpdateProxyPatternError,
  UpdateProxyPatternResponse,
} from "../types.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const listProxyPatternsQueryKey = (
  options?: Options<ListProxyPatternsData>,
) => createQueryKey("listProxyPatterns", options);

/**
 * List Proxy Patterns
 */
export const listProxyPatternsOptions = (
  options?: Options<ListProxyPatternsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Default.listProxyPatterns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listProxyPatternsQueryKey(options),
  });
};

export const createProxyPatternQueryKey = (
  options: Options<CreateProxyPatternData>,
) => createQueryKey("createProxyPattern", options);

/**
 * Create Proxy Pattern
 */
export const createProxyPatternOptions = (
  options: Options<CreateProxyPatternData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Default.createProxyPattern({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createProxyPatternQueryKey(options),
  });
};

/**
 * Create Proxy Pattern
 */
export const createProxyPatternMutation = (
  options?: Partial<Options<CreateProxyPatternData>>,
): UseMutationOptions<
  CreateProxyPatternResponse,
  AxiosError<CreateProxyPatternError>,
  Options<CreateProxyPatternData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateProxyPatternResponse,
    AxiosError<CreateProxyPatternError>,
    Options<CreateProxyPatternData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Default.createProxyPattern({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete Proxy Pattern
 */
export const deleteProxyPatternMutation = (
  options?: Partial<Options<DeleteProxyPatternData>>,
): UseMutationOptions<
  DeleteProxyPatternResponse,
  AxiosError<DeleteProxyPatternError>,
  Options<DeleteProxyPatternData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteProxyPatternResponse,
    AxiosError<DeleteProxyPatternError>,
    Options<DeleteProxyPatternData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Default.deleteProxyPattern({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const readProxyPatternQueryKey = (
  options: Options<ReadProxyPatternData>,
) => createQueryKey("readProxyPattern", options);

/**
 * Read Proxy Pattern
 */
export const readProxyPatternOptions = (
  options: Options<ReadProxyPatternData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await Default.readProxyPattern({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readProxyPatternQueryKey(options),
  });
};

/**
 * Update Proxy Pattern
 */
export const updateProxyPatternMutation = (
  options?: Partial<Options<UpdateProxyPatternData>>,
): UseMutationOptions<
  UpdateProxyPatternResponse,
  AxiosError<UpdateProxyPatternError>,
  Options<UpdateProxyPatternData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateProxyPatternResponse,
    AxiosError<UpdateProxyPatternError>,
    Options<UpdateProxyPatternData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await Default.updateProxyPattern({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
